name: Build OPNsense for Raspberry Pi (FreeBSD)

on:
  push:
    branches:
      - master  # Or your desired branch

jobs:
  build-freebsd:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code (if applicable)
      - uses: actions/checkout@v2
      - uses: pguyot/arm-runner-action@v2

      # Download FreeBSD image (outside VM)
      - name: Download FreeBSD image
        run: |
          sudo wget ${{ secrets.FREEBSD_IMAGE_URL }} -O /tmp/FreeBSD-13.2-RELEASE-arm64-aarch64-RPI.img.xz

      - name: Unpack FreeBSD image (outside VM)
        run: |
          sudo mkdir /mnt/freebsd
          sudo xzcat /tmp/FreeBSD-13.2-RELEASE-arm64-aarch64-RPI.img.xz | sudo dd of=/mnt/freebsd/FreeBSD-image.img status=progress bs=16M

      # Build OPNsense within FreeBSD VM
      - name: Build OPNsense (within the VM)
        uses: vmactions/freebsd-vm@v1.0.8  # Replace with desired version
        with:
          envs: 'FREEBSD_IMAGE_URL ${{ secrets.FREEBSD_IMAGE_URL }} OPNSENSE_VERSION ${{ secrets.OPNSENSE_VERSION }}'  # Add build-required env vars
          usesh: true  # Optional, if your build script uses a shell
          prepare: |  # Install necessary packages within the VM
            pkg update
            pkg install -y sudo curl git wget
            sudo kldload loop
          run: |
            sudo mdconfig -a -t vnode -f /mnt/freebsd/FreeBSD-image.img  # Use mounted image path (within VM)
            loopbackDevice=(mdconfig -l | grep -Eo 'md[0-9]+')
            sudo mkdir /mnt/freebsd
            sudo mount -t ffs /dev/{loopbackDevice} /mnt/freebsd
            sudo chroot /mnt/freebsd
            echo 'uart_2ndstage=1\nenable_uart=1' | sudo tee -a /boot/config.txt
            echo 'over_voltage=6\narm_freq=2000' | sudo tee -a /boot/config.txt

            # Enable powerd
            sysrc powerd_enable=\"YES\"
            /etc/rc.d/powerd restart

            # Sync time
            ntpdate pool.ntp.org

            # Update the system
            pkg update
            pkg upgrade

            # Install tools
            pkg install -y sudo git rpi-firmware u-boot-rpi4

            # Set up sudoers
            echo 'Defaults env_keep += \"HOME\"\n%wheel ALL=(ALL) NOPASSWD: ALL' >> /usr/local/etc/sudoers.d/wheel

            # Get IP address
            ifconfig genet0 | grep inet >> /tmp/rpi_ip.txt

            # Prepare build environment (within chroot)
            cd /usr/local/src  # Potentially navigate to a suitable directory within chroot

            # clone the opnsense/tools
            sudo git clone --depth=1 https://github.com/opnsense/tools.git /usr/tools

            # fetch all source codes
            sudo make -C /usr/tools update

            # make and install the old version of pkg used by opnsense
            cd /usr/ports/ports-mgmt/pkg/
            sudo make -j4
            sudo make reinstall

            # Build OPNsense (refer to OPNsense documentation for detailed steps)
            # Replace these lines with specific build commands from documentation
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 base
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 kernel
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 ports
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 plugins
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 core
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 packages
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=ARM64 distfiles
            sudo cp -lv /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/sets/base-${{ secrets.OPNSENSE_VERSION }}-aarch64.txz /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/sets/base-${{ secrets.OPNSENSE_VERSION }}-aarch64-RPI.txz
            sudo cp -lv /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/sets/kernel-${{ secrets.OPNSENSE_VERSION }}-aarch64.txz /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/sets/kernel-${{ secrets.OPNSENSE_VERSION }}-aarch64-RPI.txz
            sudo make -C /usr/tools/ VERSION=${{ secrets.OPNSENSE_VERSION }} DEVICE=RPI arm
            echo "** The built image will likely be located in: **"
            echo "** /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/images/"

      - name: Create bootable image
        run: |
          sudo ls -latr /usr/local/opnsense/build
          sudo ls -latr /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]
          sudo ls -latr /usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/images
          sudo dd if=/usr/local/opnsense/build/${{ secrets.OPNSENSE_VERSION }}[0:2]/aarch64/images/OPNsense-${{ secrets.OPNSENSE_VERSION }}-arm-aarch64-RPI.img of=/tmp/opnsense-rpi4.img bs=1M conv=sync,noerror
          sudo gzip -c /tmp/opnsense-rpi4.img > /tmp/opnsense-rpi4.img.gz

      - name: Upload bootable image
        uses: actions/upload-artifact@v3
        with:
          name: opnsense-rpi4-image
          path: /tmp/opnsense-rpi4.img.gz

      - name: Unmount FreeBSD (within the VM)
        run: |
          sudo umount /mnt/freebsd
          sudo rmdir /mnt/freebsd

      - name: Output instructions (optional)
        run: |
          echo "OPNsense image built successfully!"
          echo "Download the image from the artifacts tab and transfer it to your Raspberry Pi."
          echo "You can flash the image to an SD card using a tool like Etcher."
